syntax = "proto3";

package auth;

// Его формат очень прост, в нем будут описаны:
//
//общая информация — версия протокола, пакет и опции для генерации Go-файлов,
//сервисы — описание сигнатур методов, которые сервис должен реализовать,
//формат сообщений — объекты,  которые будут принимать и возвращать методы сервисов.

option go_package = "bxiit.sso.v1;ssov1";
import "google/api/annotations.proto";

// Auth is service for managing permissions and roles.
service Auth {
  // Register registers a new user.
  rpc Register (RegisterRequest) returns (RegisterResponse) {
    option(google.api.http) = {
      post: "/v1/users/register"
      body: "*"
    };
  };
  // Login logs in a user and returns an auth token.
  rpc Login (LoginRequest) returns (LoginResponse) {
    option(google.api.http) = {
      post: "/v1/users/login"
      body: "*"
    };
  };
  // IsAdmin checks whether a user is an admin.
  rpc IsAdmin (IsAdminRequest) returns (IsAdminResponse) {
    option(google.api.http) = {
      post: "/v1/users/isAdmin"
      body: "*"
    };
  };

  rpc IsAuthenticated (IsAuthenticatedRequest) returns (IsAuthenticatedResponse) {
    option(google.api.http) = {
      post: "/v1/users/isAuthenticated"
      body: "*"
    };
  };
}

// Объект, который отправляется при вызове RPC-метода (ручки) Register.
message RegisterRequest {
  string email = 1 [json_name="email"]; // Email of the user to register.
  string password = 2 [json_name="password"]; // Password of the user to register.
}

// Объект, котрый метод (ручка) вернет.
message RegisterResponse {
  int64 user_id = 1 [json_name="userId"]; // User ID of the registered user.
}

// Same for the method Login()
message LoginRequest {
  string email = 1 [json_name="email"]; // Email of the user to login.
  string password = 2 [json_name="password"]; // Password of the user to login.
  int32 app_id = 3 [json_name="appId"]; // ID of the app to login to.
}

message LoginResponse {
  string token = 1 [json_name="token"]; // Auth token of the logged in user.
}

message IsAdminRequest {
  int64 user_id = 1 [json_name="userId"]; // User ID to validate.
}

message IsAdminResponse {
  bool is_admin = 1 [json_name="isAdmin"]; // Indicates whether the user is an admin.
}

message IsAuthenticatedRequest {
  string token = 1 [ json_name = "token"];
}

message IsAuthenticatedResponse {
  bool is_authenticated = 1 [ json_name = "is_authenticated"];
}